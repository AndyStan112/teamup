// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

  model User {
    id                   String                 @id
    name                 String
    profileImage         String?
    age                  Int
    gender               Gender
    githubLink           String
    codingTimePreference CodingTimePreference[]
    country              String
    city                 String
    languages            String[]
    technologies         String[]
    description          String?
    createdProjects      Project[]
    joinedProjects       ProjectMember[]
    messages             Messages[]

    swipedUsers   SwipeUser[] @relation(name: "SwipeSwiper")
    swipedByUsers SwipeUser[] @relation(name: "SwipeSwiped")

    swipedProjects SwipeProject[] @relation(name: "SwipeSwiper")

    friends  Friend[] @relation("UserFriends")
    friendOf Friend[] @relation("UserFriendsOf")
    chats    Chat[]

    preferences UserPreference?

    likedProjects LikedProject[]
  
    PendingProjectMember PendingProjectMember[]
}

  model UserPreference {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    preferredGender      Gender?
    codingTimePreference CodingTimePreference[]
    languages            String[]
    technologies         String[]
  }

  model Friend {
    id       String @id @default(uuid())
    userId   String
    friendId String
    user     User   @relation("UserFriendsOf", fields: [userId], references: [id])
    friend   User   @relation("UserFriends", fields: [friendId], references: [id])
  }

  model Project {
    id                String          @id @default(uuid())
    title             String
    description       String
    githubLink        String
    images            String[]
    technologies      String[]
    originalCreator   User            @relation(fields: [originalCreatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    originalCreatorId String
    members           ProjectMember[]
    likeCount         Int             @default(0)

    dateCreated  DateTime       @default(now())
    SwipeProject SwipeProject[] @relation(name: "SwipeSwiped")

    likes LikedProject[]
    Chat  Chat?
  
    PendingProjectMember PendingProjectMember[]
}

  model LikedProject {
    id        String  @id @default(uuid())
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    projectId String
  }

  model ProjectMember {
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    projectId String
    member    User    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    memberId  String

    @@id([projectId, memberId])
  }

  model PendingProjectMember {
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    projectId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String

    @@id([projectId, userId])
}

  model Chat {
    id        String     @id @default(uuid())
    project   Project?   @relation(fields: [projectId], references: [id])
    users     User[]
    messages  Messages[]
    projectId String? @unique
  }

model SwipeUser {
  id String @id @default(uuid())

  swiper   User   @relation(name: "SwipeSwiper", fields: [swiperId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  swiperId String

  swiped   User   @relation(name: "SwipeSwiped", fields: [swipedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  swipedId String

  direction Direction

  @@unique([swiperId, swipedId])
}

model SwipeProject {
  id String @id @default(uuid())

  swiper   User   @relation(name: "SwipeSwiper", fields: [swiperId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  swiperId String

  swiped   Project @relation(name: "SwipeSwiped", fields: [swipedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  swipedId String

  direction Direction
}

enum Direction {
  LEFT
  RIGHT
}

model Messages {
  id        String   @id @default(uuid())
  message   String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    String
  timestamp DateTime @default(now())
}

enum Gender {
  FEMALE
  MALE
  OTHER
  DONOTWANTTOSAY
}

enum CodingTimePreference {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
  ANYTIME
}
