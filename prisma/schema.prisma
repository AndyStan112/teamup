// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid())
  name                 String
  profileImage         String?
  age                  Int
  gender               Gender
  githubLink           String
  codingTimePreference CodingTimePreference[]
  country              String
  city                 String
  languages            String[]
  technologies         String[]
  description          String?
  createdProjects      Project[]
  joinedProjects       ProjectMember[]
  Messages             Messages[]
}

model Project {
  id                String          @id @default(uuid())
  title             String
  description       String
  githubLink        String
  images            String[]
  technologies      String[]
  originalCreator   User            @relation(fields: [originalCreatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  originalCreatorId String
  members           ProjectMember[]
}

model ProjectMember {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
  member    User    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId  String

  @@id([projectId, memberId])
}

model Chat {
  id       String     @id @default(uuid())
  messages Messages[]
}

model Messages {
  id       String @id @default(uuid())
  message  String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId String
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId   String
  timestamp DateTime @default(now())
}

enum Gender {
  FEMALE
  MALE
  OTHER
  DONOTWANTTOSAY
}

enum CodingTimePreference {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
  ANYTIME
}
